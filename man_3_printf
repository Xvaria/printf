." Process this file with
." groff -man -Tascii test_script.1
."
.TH _PRINTF "3" "October 2020" "Holberton School CH13" "User Commands"

.SH NAME
.B _printf
- format and print data

.SH SYNOPSIS
.B _printf
\fIFORMAT \fR[\fIARGUMENT\fR] \fR[...\fR]
.br

.SH DESCRIPTION
.PP
Print ARGUMENT(s) according to FORMAT.

.TP
.B 
FORMAT identifies a value after his invocation \fR[\fI%\fR[\fIformater\fR]\fR] 
.TP
.B
These \fIformater\fR especifies the output way of a variable or the same FORMAT argument string: 

.TP
.B
% - c
Write in the output console a int argument converted to an unsigned char.

.TP
.B
% - s
The \fIconst char *\fR argument is expected to be a pointer to an array of character type(pointer to an string). Characters from the array are written up to.

.TP
.B
% - %
If after the \fIFORMAT\fR is another '%' the function just print the percent in the output console.

.TP
.B
% - i/d
The int argument is converted to signal decimal notation.

.TP
.B
% - u
If a int argument is passed, the program will attemp to convert it on a \fIunsigned int\fP, and will be printed in format of unsigned decimal.

.TP
.B
% - o
If a int argument is passed, the program will attemp to convert it on a \fIunsigned int\fP, and will be printed in format of unsigned octal format.


.TP
.B
% - X/x
If a int argument is passed, the program will attemp to convert it on a \fIunsigned int\fP, and will be printed in format of unsigned hexadecimal in lowercase\fB(x)\fP, or unsigned hexadecimal in uppercase \fB(X)\fP.

.TP
.B
% - r
The argument changes the order for be printed out, reversing the given argument in the standard


.SS Return value
In successful return, these functions return the number of characters \fB(nbytes)\fP
printed (excluding the null byte used to end output to strings)

.SH OBJECT

.PP
The function 
.B
_printf 
uses a base structure to define the sub-function to execute after a coincidence in the \fIformater\fR identifier 

.PP
Grapic representation of the primary structure defining the 
.I
formater 
and his function


.RS 1.0i

.TS
tab(@), left, box;
cB
cB | c
r | l.
STRUCTURE
_
formater@Function to use
_
Char let @ Int (*f)()
.TE
.RE


.RS 0.2i

.TS
tab (@), box;
c | c | l.
formater@Function@Output format
_
T{
\(aqc\(aq
T}@int print_char(va_list c)@Char @
_
T{
\(aqs\(aq
T}@int print_string(va_list s)@String
_
T{
\(aqd\(aq
T}@int print_int(va_list d)@Integer on decimal
_
T{
\(aqi\(aq
T}@int print_int(va_list d)@Integer
_
T{
\(aqu\(aq
T}@int print_unsigned_u(va_list d)@Unsigned int
_
T{
\(aqo\(aq
T}@int print_unsigned_o(va_list d)@Format octal
_
T{
\(aqx\(aq
T}@int print_unsigned_x(va_list d)@Hex lowercase format
_
T{
\(aqX\(aq
T}@int print_unsigned_X(va_list d)@Hex uppercase format
_
T{
\(aqr\(aq
T}@int print_reversed(va_list d)@Print in reverse
.TE

.TP

.TP
.RE
.PP

The \fBformater\fP, identifies the "char[x]" after the universal \fBFORMAT(%)\fP, passed to analize and execute the function with the list of arguments passed by (va_list). 

If the number of \fBFORMAT(%)\fP invocation doesn't match with the number of arguments passed on \fR[...\fR], the program will take and print only the arguments to fill.

.PP
.PP

.SH EXAMPLE

.PP
The function _printf start analyzing the format input like an array, and every position is a single letter, on the presence in a "n" position with universal symbol\fB(%)\fP, makes a call to \fIint (*funcstruct(char c))(va_list);\fP 

.nf
-------------------------------------------
/*Lets suppose we invoke:*/
/*_printf("This is a character %c", 'H')*/
-------------------------------------------
int _printf(const char *format, ...)
{
    va_list valist;
    int t = 0, a;
    int (*f)(va_list);

    va_start(valist, format);

    /*Edge case assumption*/
    if (!format || (format[0] == '%' && format[1] == '\0'))
        return (-1);

	
    /*Start iterate over the FORMAT array on every position*/
    for (a = 0; format[a]; a++)
    {      	 

        /*in a coincidence of the unversal symbol(%)*/
        if (format[a] == '%')
        {  	
               /*if the second argument is another %*/ 
               /*print only "%"*/
             if (format[a + 1] == '%')
             {
                  write(1, &format[a], 1);
                  t++;
                  a++;
             }
             else
             {
                 /*CALL TO THE FUNCTION (funcstruct) WITH*/
                 /*PARAMETER AFTER SYMBOL "%"*/
                  f = funcstruct(format[a + 1]);

                  if (f)
                  {
                         t += f(valist);
                         a++;
                  }
                  else
                  {
                         write(1, &format[a], 1);
                         t++;
                  }
              }
          }
          else
          {
               /*Just print in the order of the array FORMAT*/
               write(1, &format[a], 1);

               t++;
           }
	}
        va_end(valist);
        
        /*return nbytes used in printer*/
        return (t);
}


.PP
Then, after the call of (funcstruct), analize the \fIformater\fP after the universal simbol of \fBFORMAT(%)\fP, and assign it to his second structure date, the function corresponding to the action required   

.nf
#include "holberton.h"

int (*funcstruct(char c))(va_list)
{
   /*Estructure that links a char(formater), to a function*/

        print_t func[] = {
                {'c', print_char},
                {'s', print_string},
                {'i', print_int},
                {'d', print_int},
                {'u', print_unsigned_u},
                {'o', print_unsigned_o},
                {'x', print_unsigned_x},
                {'X', print_unsigned_X},
                {'\0', NULL}
        };

        unsigned int i = 0;

    /*Iterate over the structure*/
        for (; func[i].let; i++)
        {

    /*in a coincidence with the formater passed "c"*/
    /*acces to his second structure linked data "f" and return it*/
                if (c == func[i].let)
                {
                        return (func[i].f);
                }

        }
        return (NULL);
}

.SH REPORTING BUGS
.PP
For reporting troubleshoots executing the program with edge cases or memory leak information, please reffer to someone of the colaborators in this project, or be free to send us a mail to cisfun.com

.PP
 

.SH EXIT STATUS
.TP
.B
t
Size of bytes used on execution 

.TP
.B
-1
\fBFORMAT\fP and/or \fIformater\fP argument is NULL or empty, execution error


.SH SEE ALSO
.BR https://www.holberton.com
.PP
.B Full project documentation based on a project to emulate a copy of printf with formater specifiers


.SH COPYRIGHT
.PP
Copyright 2020 HolbertonSchool. CH13.
.PP 
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

https://www.cisfun.com


.SH CREDITS
.PP
Holberton School - Cohort 13
.TP
Project _printf by:

.PP
.B
-https://www.github.com/ANDRESOTELO

.PP
.B
-https://www.github.com/Xvaria

.PP
.B
-https://www.github.com/JoseNSoler

.SH
.PP

